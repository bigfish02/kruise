/*
Copyright 2020 The Kruise Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openkruise/kruise/apis/apps/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SidecarSetLister helps list SidecarSets.
type SidecarSetLister interface {
	// List lists all SidecarSets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SidecarSet, err error)
	// SidecarSets returns an object that can list and get SidecarSets.
	SidecarSets(namespace string) SidecarSetNamespaceLister
	SidecarSetListerExpansion
}

// sidecarSetLister implements the SidecarSetLister interface.
type sidecarSetLister struct {
	indexer cache.Indexer
}

// NewSidecarSetLister returns a new SidecarSetLister.
func NewSidecarSetLister(indexer cache.Indexer) SidecarSetLister {
	return &sidecarSetLister{indexer: indexer}
}

// List lists all SidecarSets in the indexer.
func (s *sidecarSetLister) List(selector labels.Selector) (ret []*v1alpha1.SidecarSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SidecarSet))
	})
	return ret, err
}

// SidecarSets returns an object that can list and get SidecarSets.
func (s *sidecarSetLister) SidecarSets(namespace string) SidecarSetNamespaceLister {
	return sidecarSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SidecarSetNamespaceLister helps list and get SidecarSets.
type SidecarSetNamespaceLister interface {
	// List lists all SidecarSets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SidecarSet, err error)
	// Get retrieves the SidecarSet from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SidecarSet, error)
	SidecarSetNamespaceListerExpansion
}

// sidecarSetNamespaceLister implements the SidecarSetNamespaceLister
// interface.
type sidecarSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SidecarSets in the indexer for a given namespace.
func (s sidecarSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SidecarSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SidecarSet))
	})
	return ret, err
}

// Get retrieves the SidecarSet from the indexer for a given namespace and name.
func (s sidecarSetNamespaceLister) Get(name string) (*v1alpha1.SidecarSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sidecarset"), name)
	}
	return obj.(*v1alpha1.SidecarSet), nil
}
